$date
	Fri May 12 16:22:10 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module async_fifo $end
$var wire 1 ! arst_n $end
$var wire 8 " data_in [7:0] $end
$var wire 1 # full $end
$var wire 1 $ r_en $end
$var wire 1 % rclk $end
$var wire 4 & testmy [3:0] $end
$var wire 1 ' w_en $end
$var wire 1 ( wclk $end
$var wire 4 ) wrt_ptr [3:0] $end
$var wire 1 * wr_srstn $end
$var wire 4 + read_ptr [3:0] $end
$var wire 1 , rd_srstn $end
$var wire 1 - full_gen $end
$var wire 1 . empt $end
$var wire 8 / data_out [7:0] $end
$scope module async_bram $end
$var wire 8 0 data_in [7:0] $end
$var wire 1 # full $end
$var wire 1 % rd_clk $end
$var wire 1 $ rd_en $end
$var wire 1 ( wr_clk $end
$var wire 1 ' wr_en $end
$var wire 4 1 wrt_ptr [3:0] $end
$var wire 3 2 w_ptr [2:0] $end
$var wire 4 3 read_ptr [3:0] $end
$var wire 3 4 r_ptr [2:0] $end
$var wire 8 5 data_out [7:0] $end
$upscope $end
$scope module empt_gen $end
$var wire 4 6 wr_pointer [3:0] $end
$var wire 4 7 rd_pointer [3:0] $end
$var wire 1 - full $end
$var wire 1 . empty $end
$upscope $end
$scope module rd_pointer $end
$var wire 1 . empty $end
$var wire 1 % rclk $end
$var wire 1 $ rd_en $end
$var wire 1 8 rd_ready $end
$var wire 1 , rd_srstn $end
$var reg 4 9 read_ptr [3:0] $end
$upscope $end
$scope module rd_rst_scnch_m $end
$var wire 1 % clk $end
$var wire 1 ! n_as_signal $end
$var reg 1 : hold $end
$var reg 1 , n_s_signal $end
$upscope $end
$scope module wr_pointer $end
$var wire 1 # full $end
$var wire 1 ( wclk $end
$var wire 1 ' wr_en $end
$var wire 1 ; wr_ready $end
$var wire 1 * wr_srstn $end
$var reg 4 < wrt_ptr [3:0] $end
$upscope $end
$scope module wr_rst_scnch_m $end
$var wire 1 ( clk $end
$var wire 1 ! n_as_signal $end
$var reg 1 = hold $end
$var reg 1 * n_s_signal $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 > i [31:0] $end
$upscope $end
$upscope $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 ? \data_regs[0] [7:0] $end
$upscope $end
$upscope $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 @ \data_regs[1] [7:0] $end
$upscope $end
$upscope $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 A \data_regs[2] [7:0] $end
$upscope $end
$upscope $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 B \data_regs[3] [7:0] $end
$upscope $end
$upscope $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 C \data_regs[4] [7:0] $end
$upscope $end
$upscope $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 D \data_regs[5] [7:0] $end
$upscope $end
$upscope $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 E \data_regs[6] [7:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
b111 >
0=
bx <
0;
0:
bx 9
08
bx 7
bx 6
b0 5
bx 4
bx 3
bx 2
bx 1
bz 0
b0 /
x.
x-
1,
bx +
1*
bx )
1(
0'
bz &
1%
0$
x#
bz "
1!
$end
#1000
0(
#2000
1(
#3000
0(
0%
#4000
1(
#5000
0(
#6000
1(
1%
#7000
0(
#8000
1(
#9000
0(
0%
#10000
1:
0,
1=
0*
1(
0!
#11000
0(
#12000
0#
0-
1.
b0 4
b0 +
b0 3
b0 7
b0 9
b0 2
b0 )
b0 1
b0 6
b0 <
1(
1%
#13000
0(
#14000
1(
#15000
0(
0%
#16000
1(
#17000
0(
#18000
1!
1(
1%
#19000
0(
#20000
0=
1(
#21000
0(
0%
#22000
1*
1(
#23000
0(
#24000
1;
1'
b10110000 "
b10110000 0
0:
1(
1%
#25000
0(
#26000
b1101000 "
b1101000 0
b10110000 ?
0.
b1 2
b1 )
b1 1
b1 6
b1 <
1(
#27000
0(
0%
#28000
b1110011 "
b1110011 0
b1101000 @
b10 2
b10 )
b10 1
b10 6
b10 <
1(
#29000
0(
#30000
0;
0'
b1110011 A
1,
b11 2
b11 )
b11 1
b11 6
b11 <
1(
1%
#31000
0(
#32000
1(
#33000
0(
0%
#34000
1(
#35000
0(
#36000
18
b10110000 /
b10110000 5
1$
1(
1%
#37000
0(
#38000
1(
#39000
0(
0%
#40000
1(
#41000
0(
#42000
b1101000 /
b1101000 5
b1 4
b1 +
b1 3
b1 7
b1 9
1(
1%
#43000
0(
#44000
1(
#45000
0(
0%
#46000
1(
#47000
0(
#48000
b1110011 /
b1110011 5
b10 4
b10 +
b10 3
b10 7
b10 9
1(
1%
#49000
0(
#50000
1(
#51000
0(
0%
#52000
1(
#53000
0(
#54000
08
bx /
bx 5
1.
b11 4
b11 +
b11 3
b11 7
b11 9
1(
1%
#54001
b0 /
b0 5
0$
#55001
0(
#56001
1(
#57001
0(
0%
#58001
1(
#59001
0(
#60001
1(
1%
#61001
0(
#62001
1(
#63001
0(
0%
#64001
1:
0,
1=
0*
1(
0!
#65001
0(
#66001
b0 4
b0 +
b0 3
b0 7
b0 9
1.
b0 2
b0 )
b0 1
b0 6
b0 <
1(
1%
#67001
0(
#68001
1(
#69001
0(
0%
#70001
1(
#71001
0(
#72001
1!
1(
1%
#73001
0(
#74001
0=
1(
#75001
0(
0%
#76001
1*
1(
#77001
0(
#78001
1;
1'
b11100001 "
b11100001 0
0:
1(
1%
#79001
0(
#80001
b11111100 "
b11111100 0
b11100001 ?
0.
b1 2
b1 )
b1 1
b1 6
b1 <
1(
#81001
0(
0%
#82001
b10001000 "
b10001000 0
b11111100 @
b10 2
b10 )
b10 1
b10 6
b10 <
1(
#83001
0(
#84001
0;
0'
b10001000 A
1,
b11 2
b11 )
b11 1
b11 6
b11 <
1(
1%
#85001
0(
#86001
1(
#87001
0(
0%
#88001
1(
#89001
0(
#90001
18
b11100001 /
b11100001 5
1$
1(
1%
#91001
0(
#92001
1(
#93001
0(
0%
#94001
1(
#95001
0(
#96001
b11111100 /
b11111100 5
b1 4
b1 +
b1 3
b1 7
b1 9
1(
1%
#97001
0(
#98001
1(
#99001
0(
0%
#100001
1(
#101001
0(
#102001
b10001000 /
b10001000 5
b10 4
b10 +
b10 3
b10 7
b10 9
1(
1%
#102002
08
b0 /
b0 5
0$
#103002
0(
#104002
1(
#105002
0(
0%
#106002
1(
#107002
0(
#108002
1(
1%
#109002
0(
#110002
1(
#111002
0(
0%
#112002
1:
0,
1=
0*
1(
0!
#113002
0(
#114002
1.
b0 4
b0 +
b0 3
b0 7
b0 9
b0 2
b0 )
b0 1
b0 6
b0 <
1(
1%
#115002
0(
#116002
1(
#117002
0(
0%
#118002
1(
#119002
0(
#120002
1!
1(
1%
#121002
0(
#122002
0=
1(
#123002
0(
0%
#124002
1*
1(
#125002
0(
#126002
1;
1'
b11110011 "
b11110011 0
0:
1(
1%
#127002
0(
#128002
b1011100 "
b1011100 0
b11110011 ?
0.
b1 2
b1 )
b1 1
b1 6
b1 <
1(
#129002
0(
0%
#130002
b11000111 "
b11000111 0
b1011100 @
b10 2
b10 )
b10 1
b10 6
b10 <
1(
#131002
0(
#132002
b10010010 "
b10010010 0
b11000111 A
1,
b11 2
b11 )
b11 1
b11 6
b11 <
1(
1%
#133002
0(
#134002
0;
0'
b10010010 B
b100 2
b100 )
b100 1
b100 6
b100 <
1(
#135002
0(
0%
#136002
1(
#137002
0(
#138002
18
b11110011 /
b11110011 5
1$
1(
1%
#139002
0(
#140002
1(
#141002
0(
0%
#142002
1(
#143002
0(
#144002
b1011100 /
b1011100 5
b1 4
b1 +
b1 3
b1 7
b1 9
1(
1%
#145002
0(
#146002
1(
#147002
0(
0%
#148002
1(
#149002
0(
#150002
b11000111 /
b11000111 5
b10 4
b10 +
b10 3
b10 7
b10 9
1(
1%
#151002
0(
#152002
1(
#153002
0(
0%
#154002
1(
#155002
0(
#156002
b10010010 /
b10010010 5
b11 4
b11 +
b11 3
b11 7
b11 9
1(
1%
#156003
08
b0 /
b0 5
0$
#157003
0(
#158003
1(
#159003
0(
0%
#160003
1(
#161003
0(
#162003
1(
1%
#163003
0(
#164003
1(
#165003
0(
0%
#166003
1:
0,
1=
0*
1(
0!
#167003
0(
#168003
1.
b0 4
b0 +
b0 3
b0 7
b0 9
b0 2
b0 )
b0 1
b0 6
b0 <
1(
1%
#169003
0(
#170003
1(
#171003
0(
0%
#172003
1(
#173003
0(
#174003
1!
1(
1%
#175003
0(
#176003
0=
1(
#177003
0(
0%
#178003
1*
1(
#179003
0(
#180003
1;
1'
b1100 "
b1100 0
0:
1(
1%
#181003
0(
#182003
b1111101 "
b1111101 0
b1100 ?
0.
b1 2
b1 )
b1 1
b1 6
b1 <
1(
#183003
0(
0%
#184003
b10000010 "
b10000010 0
b1111101 @
b10 2
b10 )
b10 1
b10 6
b10 <
1(
#185003
0(
#186003
b10001010 "
b10001010 0
b10000010 A
1,
b11 2
b11 )
b11 1
b11 6
b11 <
1(
1%
#187003
0(
#188003
0;
0'
b10001010 B
b100 2
b100 )
b100 1
b100 6
b100 <
1(
#189003
0(
0%
#190003
1(
#191003
0(
#192003
18
b1100 /
b1100 5
1$
1(
1%
#193003
0(
#194003
1(
#195003
0(
0%
#196003
1(
#197003
0(
#198003
b1111101 /
b1111101 5
b1 4
b1 +
b1 3
b1 7
b1 9
1(
1%
#199003
0(
#200003
1(
#201003
0(
0%
#202003
1(
#203003
0(
#204003
b10000010 /
b10000010 5
b10 4
b10 +
b10 3
b10 7
b10 9
1(
1%
#204004
