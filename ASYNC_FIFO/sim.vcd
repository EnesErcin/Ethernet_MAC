$date
	Fri Apr 28 10:45:01 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module async_fifo $end
$var wire 1 ! arst_n $end
$var wire 8 " data_in [7:0] $end
$var wire 1 # r_en $end
$var wire 1 $ rclk $end
$var wire 1 % w_en $end
$var wire 1 & wclk $end
$var wire 9 ' wrt_ptr [8:0] $end
$var wire 1 ( wr_srstn $end
$var wire 9 ) read_ptr [8:0] $end
$var wire 1 * rd_srstn $end
$var wire 1 + full $end
$var wire 1 , empt $end
$var wire 8 - data_out [7:0] $end
$scope module async_bram $end
$var wire 8 . data_in [7:0] $end
$var wire 1 $ rd_clk $end
$var wire 1 # rd_en $end
$var wire 1 & wr_clk $end
$var wire 1 % wr_en $end
$var wire 8 / wrt_ptr [7:0] $end
$var wire 9 0 read_ptr [8:0] $end
$var reg 8 1 data_out [7:0] $end
$upscope $end
$scope module empt_gen $end
$var wire 9 2 wr_pointer [8:0] $end
$var wire 9 3 rd_pointer [8:0] $end
$var wire 1 + full $end
$var wire 1 , empty $end
$upscope $end
$scope module rd_pointer $end
$var wire 1 , empty $end
$var wire 1 $ rclk $end
$var wire 1 # rd_en $end
$var wire 1 4 rd_ready $end
$var wire 1 * rd_srstn $end
$var reg 9 5 read_ptr [8:0] $end
$upscope $end
$scope module rd_rst_scnch_m $end
$var wire 1 & clk $end
$var wire 1 ! n_asignal $end
$var reg 1 * n_ssignal $end
$var reg 1 6 toggle $end
$upscope $end
$scope module wr_pointer $end
$var wire 1 7 full $end
$var wire 1 & wclk $end
$var wire 1 % wr_en $end
$var wire 1 8 wr_ready $end
$var wire 1 ( wr_srstn $end
$var reg 9 9 wrt_ptr [8:0] $end
$upscope $end
$scope module wr_rst_scnch_m $end
$var wire 1 & clk $end
$var wire 1 ! n_asignal $end
$var reg 1 ( n_ssignal $end
$var reg 1 : toggle $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 ; i [31:0] $end
$upscope $end
$upscope $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 < \data_regs[0] [7:0] $end
$upscope $end
$upscope $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 = \data_regs[1] [7:0] $end
$upscope $end
$upscope $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 > \data_regs[2] [7:0] $end
$upscope $end
$upscope $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 ? \data_regs[3] [7:0] $end
$upscope $end
$upscope $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 @ \data_regs[4] [7:0] $end
$upscope $end
$upscope $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 A \data_regs[5] [7:0] $end
$upscope $end
$upscope $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 B \data_regs[6] [7:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
b111 ;
1:
b0 9
x8
07
16
b0 5
04
b0 3
b0 2
bx 1
b0 0
b0 /
bz .
bx -
1,
0+
1*
b0 )
1(
b0 '
1&
z%
1$
z#
bz "
1!
$end
#2000
0&
#4000
1&
0$
#6000
0&
#8000
1&
1$
#10000
0&
#12000
1&
0$
#14000
0&
#16000
1&
1$
#18000
0&
#20000
1&
0$
#22000
0&
#24000
1&
1$
#26000
0&
#28000
1&
0$
#30000
0&
#32000
1&
1$
#34000
0&
#36000
1&
0$
#38000
0&
#40000
1&
1$
#42000
0&
#44000
1&
0$
#46000
0&
#48000
1&
1$
#50000
0:
06
0&
0!
#52000
08
0*
0(
1&
0$
#54000
0&
#56000
1&
1$
#58000
0&
#60000
1&
0$
#62000
0&
#64000
1&
1$
#66000
0&
#68000
1&
0$
#70000
0&
#72000
1&
1$
#74000
0&
#76000
1&
0$
#78000
0&
#80000
1:
16
1&
1$
1!
#82000
0&
#84000
1%
b10000001 "
b10000001 .
18
1*
1(
1&
0$
#86000
0&
#88000
b101 "
b101 .
b10000001 <
x4
0,
b1 /
b1 '
b1 2
b1 9
1&
1$
#90000
0&
#92000
b10101010 "
b10101010 .
b101 =
b10 /
b10 '
b10 2
b10 9
1&
0$
#94000
0&
#96000
b1000001 "
b1000001 .
b10101010 >
b11 /
b11 '
b11 2
b11 9
1&
1$
#98000
0&
#100000
b10000110 "
b10000110 .
b1000001 ?
b100 /
b100 '
b100 2
b100 9
1&
0$
#102000
0&
#104000
b1001110 "
b1001110 .
b10000110 @
b101 /
b101 '
b101 2
b101 9
1&
1$
#106000
0&
#108000
08
0%
b1001110 A
b110 /
b110 '
b110 2
b110 9
1&
0$
#110000
0&
#112000
1&
1$
#114000
0&
#116000
1&
0$
#118000
0&
#120000
1&
1$
#122000
0&
#124000
1&
0$
#126000
0&
#128000
1&
1$
#130000
0&
#132000
1&
0$
#134000
0&
#136000
1&
1$
#138000
0&
#140000
1&
0$
#142000
0&
#144000
1&
1$
#146000
0&
#148000
1&
0$
#150000
0&
#152000
1&
1$
#154000
0&
#156000
1&
0$
#158000
0&
#160000
1&
1$
#162000
0&
#164000
1&
0$
#166000
0&
#168000
1&
1$
#170000
0&
#172000
1&
0$
#174000
0&
#176000
1&
1$
#178000
14
0&
1#
#180000
1&
0$
#182000
0&
#184000
b101 -
b101 1
b1 )
b1 0
b1 3
b1 5
1&
1$
#186000
0&
#188000
1&
0$
#190000
0&
#192000
b10 )
b10 0
b10 3
b10 5
1&
1$
#194000
0&
#196000
1&
0$
#198000
0&
#200000
b1000001 -
b1000001 1
b11 )
b11 0
b11 3
b11 5
1&
1$
#202000
0&
#204000
1&
0$
#206000
0&
#208000
04
0#
b100 )
b100 0
b100 3
b100 5
1&
1$
#210000
0&
#212000
1&
0$
#214000
0&
#216000
1&
1$
#218000
0&
#220000
1&
0$
#222000
0&
#224000
1&
1$
#226000
0&
#228000
1&
0$
#230000
0&
#232000
1&
1$
#234000
0&
#236000
1&
0$
#238000
0&
#240000
1&
1$
#242000
0&
#244000
1&
0$
#246000
0&
#248000
1&
1$
#250000
0&
#252000
1&
0$
#254000
0&
#256000
1&
1$
#258000
0&
#260000
1&
0$
#262000
0&
#264000
1&
1$
#266000
0&
#268000
1&
0$
#270000
0&
#272000
1&
1$
#274000
0&
#276000
1&
0$
#278001
