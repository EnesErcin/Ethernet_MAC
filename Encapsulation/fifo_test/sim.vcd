$date
	Wed May 10 16:40:35 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module async_fifo $end
$var wire 1 ! arst_n $end
$var wire 8 " data_in [7:0] $end
$var wire 1 # full $end
$var wire 1 $ r_en $end
$var wire 1 % rclk $end
$var wire 1 & w_en $end
$var wire 1 ' wclk $end
$var wire 4 ( wrt_ptr [3:0] $end
$var wire 1 ) wr_srstn $end
$var wire 4 * read_ptr [3:0] $end
$var wire 1 + rd_srstn $end
$var wire 1 , full_gen $end
$var wire 1 - empt $end
$var wire 8 . data_out [7:0] $end
$scope module async_bram $end
$var wire 8 / data_in [7:0] $end
$var wire 1 # full $end
$var wire 1 % rd_clk $end
$var wire 1 $ rd_en $end
$var wire 1 ' wr_clk $end
$var wire 1 & wr_en $end
$var wire 4 0 wrt_ptr [3:0] $end
$var wire 3 1 w_ptr [2:0] $end
$var wire 4 2 read_ptr [3:0] $end
$var wire 3 3 r_ptr [2:0] $end
$var wire 8 4 data_out [7:0] $end
$upscope $end
$scope module empt_gen $end
$var wire 4 5 wr_pointer [3:0] $end
$var wire 4 6 rd_pointer [3:0] $end
$var wire 1 , full $end
$var wire 1 - empty $end
$upscope $end
$scope module rd_pointer $end
$var wire 1 - empty $end
$var wire 1 % rclk $end
$var wire 1 $ rd_en $end
$var wire 1 7 rd_ready $end
$var wire 1 + rd_srstn $end
$var reg 4 8 read_ptr [3:0] $end
$upscope $end
$scope module rd_rst_scnch_m $end
$var wire 1 % clk $end
$var wire 1 ! n_asignal $end
$var reg 1 + n_ssignal $end
$var reg 1 9 toggle $end
$upscope $end
$scope module wr_pointer $end
$var wire 1 # full $end
$var wire 1 ' wclk $end
$var wire 1 & wr_en $end
$var wire 1 : wr_ready $end
$var wire 1 ) wr_srstn $end
$var reg 4 ; wrt_ptr [3:0] $end
$upscope $end
$scope module wr_rst_scnch_m $end
$var wire 1 ' clk $end
$var wire 1 ! n_asignal $end
$var reg 1 ) n_ssignal $end
$var reg 1 < toggle $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 = i [31:0] $end
$upscope $end
$upscope $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 > \data_regs[0] [7:0] $end
$upscope $end
$upscope $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 ? \data_regs[1] [7:0] $end
$upscope $end
$upscope $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 @ \data_regs[2] [7:0] $end
$upscope $end
$upscope $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 A \data_regs[3] [7:0] $end
$upscope $end
$upscope $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 B \data_regs[4] [7:0] $end
$upscope $end
$upscope $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 C \data_regs[5] [7:0] $end
$upscope $end
$upscope $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 D \data_regs[6] [7:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
b111 =
1<
bx ;
x:
19
bx 8
x7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bz /
bx .
x-
x,
1+
bx *
1)
bx (
1'
z&
1%
z$
x#
bz "
1!
$end
#1000
0'
#2000
1'
0%
#3000
0'
#4000
1'
1%
#5000
0'
#6000
1'
0%
#7000
0'
#8000
1'
1%
#9000
0'
#10001
