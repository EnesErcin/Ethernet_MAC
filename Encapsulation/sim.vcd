$date
	Thu Jun 15 15:49:42 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module transmit $end
$scope module encapsulation $end
$var wire 8 ! GMII_d [7:0] $end
$var wire 2 " bf_out_buffer_ready [1:0] $end
$var wire 1 # clk $end
$var wire 8 $ crc_data_in [7:0] $end
$var wire 1 % eth_tx_clk $end
$var wire 1 & eth_tx_en $end
$var wire 8 ' ff_out_data_in [7:0] $end
$var wire 1 ( rst $end
$var wire 1 ) data_out_en $end
$var wire 32 * crc_check [31:0] $end
$var reg 1 + GMII_tx_dv $end
$var reg 1 , GMII_tx_er $end
$var reg 1 - bf_in_pct_txed $end
$var reg 1 . bf_in_r_en $end
$var reg 16 / byte_count [15:0] $end
$var reg 1 0 crc_lsb $end
$var reg 32 1 crc_res [31:0] $end
$var reg 8 2 data_out [7:0] $end
$var reg 5 3 intr_pct_gap [4:0] $end
$var reg 16 4 len_payload [15:0] $end
$var reg 1 5 rst_crc $end
$var reg 4 6 state_reg [3:0] $end
$var reg 1 7 updatecrc $end
$scope function reflect_byte $end
$upscope $end
$scope module crc_mod $end
$var wire 1 % clk $end
$var wire 1 0 crc_lsb $end
$var wire 8 8 data [7:0] $end
$var wire 16 9 length [15:0] $end
$var wire 1 5 rst $end
$var wire 1 : strt $end
$var wire 1 7 updatecrc $end
$var wire 32 ; result [31:0] $end
$var wire 8 < data_r [7:0] $end
$var reg 12 = bit_n [11:0] $end
$var reg 12 > byte_count [11:0] $end
$var reg 32 ? crc [31:0] $end
$var reg 32 @ crc_acc [31:0] $end
$var reg 32 A crc_acc_n [31:0] $end
$var reg 8 B data_buf [7:0] $end
$var reg 32 C nresult [31:0] $end
$var reg 12 D payload_len [11:0] $end
$scope function crc_bit_updt $end
$upscope $end
$scope function reflect_byte $end
$upscope $end
$scope function reflectcrc $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module transmit $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 E \data_regs[0] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module transmit $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 F \data_regs[1] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module transmit $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 G \data_regs[2] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module transmit $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 H \data_regs[3] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module transmit $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 I \data_regs[4] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module transmit $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 J \data_regs[5] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module transmit $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 K \data_regs[6] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module transmit $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 L \data_regs[7] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module transmit $end
$var wire 1 M buf_w_en $end
$var wire 8 N data_in [7:0] $end
$var wire 1 ( eth_rst $end
$var wire 1 % eth_tx_clk $end
$var wire 1 & eth_tx_en $end
$var wire 1 O fifo_nrst $end
$var wire 1 P pct_qued $end
$var wire 1 Q r_clk $end
$var wire 1 # sys_clk $end
$var wire 1 R w_clk $end
$var wire 8 S buf_data_out [7:0] $end
$var wire 2 T bf_out_buffer_ready [1:0] $end
$var wire 1 . bf_in_r_en $end
$var wire 1 - bf_in_pct_txed $end
$scope module async_fifo $end
$var wire 1 O arst_n $end
$var wire 8 U data_in [7:0] $end
$var wire 1 V full $end
$var wire 1 Q rclk $end
$var wire 1 M w_en $end
$var wire 1 # wclk $end
$var wire 13 W wrt_ptr [12:0] $end
$var wire 1 X wr_srstn $end
$var wire 13 Y read_ptr [12:0] $end
$var wire 1 Z rd_srstn $end
$var wire 1 . r_en $end
$var wire 1 [ full_gen $end
$var wire 1 \ empt $end
$var wire 8 ] data_out [7:0] $end
$scope module async_bram $end
$var wire 8 ^ data_in [7:0] $end
$var wire 1 V full $end
$var wire 1 Q rd_clk $end
$var wire 1 # wr_clk $end
$var wire 1 M wr_en $end
$var wire 13 _ wrt_ptr [12:0] $end
$var wire 1 X wr_srstn $end
$var wire 12 ` w_ptr [11:0] $end
$var wire 13 a read_ptr [12:0] $end
$var wire 1 . rd_en $end
$var wire 12 b r_ptr [11:0] $end
$var wire 8 c data_out [7:0] $end
$scope begin $ivl_for_loop2 $end
$var integer 32 d i [31:0] $end
$upscope $end
$upscope $end
$scope module empt_gen $end
$var wire 13 e wr_pointer [12:0] $end
$var wire 13 f rd_pointer [12:0] $end
$var wire 1 [ full $end
$var wire 1 \ empty $end
$upscope $end
$scope module rd_pointer $end
$var wire 1 \ empty $end
$var wire 1 Q rclk $end
$var wire 1 g rd_ready $end
$var wire 1 Z rd_srstn $end
$var wire 1 . rd_en $end
$var reg 13 h read_ptr [12:0] $end
$upscope $end
$scope module rd_rst_scnch_m $end
$var wire 1 Q clk $end
$var wire 1 O n_as_signal $end
$var reg 1 i hold $end
$var reg 1 Z n_s_signal $end
$upscope $end
$scope module wr_pointer $end
$var wire 1 V full $end
$var wire 1 # wclk $end
$var wire 1 M wr_en $end
$var wire 1 j wr_ready $end
$var wire 1 X wr_srstn $end
$var reg 13 k wrt_ptr [12:0] $end
$upscope $end
$scope module wr_rst_scnch_m $end
$var wire 1 # clk $end
$var wire 1 O n_as_signal $end
$var reg 1 l hold $end
$var reg 1 X n_s_signal $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 m i [31:0] $end
$upscope $end
$upscope $end
$scope module buf_ready $end
$var wire 1 P bf_in_pct_qued $end
$var wire 1 # eth_tx_clk $end
$var wire 1 ( rst $end
$var wire 1 - bf_in_pct_txed $end
$var reg 2 n bf_out_buffer_ready [1:0] $end
$upscope $end
$scope module encapsulation $end
$scope function reflect_byte $end
$upscope $end
$scope module crc_mod $end
$scope function crc_bit_updt $end
$upscope $end
$scope function reflect_byte $end
$upscope $end
$scope function reflectcrc $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 n
b1000 m
0l
bx k
xj
0i
bx h
xg
bx f
bx e
b0 d
bx c
bx b
bx a
bx `
bx _
bz ^
bx ]
x\
x[
xZ
bx Y
xX
bx W
xV
bz U
b0 T
bx S
1R
zQ
zP
zO
bz N
zM
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
b10111101011 D
b0 C
b0 B
b11111111111111111111111111111111 A
b11111111111111111111111111111111 @
b100110000010001110110110111 ?
b0 >
b0 =
b0 <
b0 ;
z:
b0 9
b0 8
07
b0 6
15
b0 4
b0 3
b0 2
b1111 1
00
b0 /
x.
x-
x,
0+
b0 *
0)
z(
bx '
z&
z%
b0 $
1#
b0 "
b0 !
$end
#2000
0R
0#
#4000
1R
1#
#6000
0R
0#
#8000
1R
1#
#10000
0j
0g
1l
0X
1i
0Z
0-
0O
0R
0#
1Q
1%
1(
0P
#12000
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 `
b101111101100 d
b0 W
b0 _
b0 e
b0 k
1R
1#
#14000
0R
0#
0Q
0%
#16000
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b101111101100 d
1R
1#
#18000
0V
0[
b0 '
b0 S
b0 ]
b0 c
1\
b0 b
b0 Y
b0 a
b0 f
b0 h
0R
0#
1Q
1%
#20000
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b101111101100 d
1R
1#
#22000
1O
0R
0#
0Q
0%
0(
#24000
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
0l
b101111101100 d
1R
1#
#26000
0i
0R
0#
1Q
1%
#28000
xj
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
1X
b101111101100 d
1R
1#
#30000
0R
0#
0Q
0%
#32000
1R
1#
#34000
1Z
0R
0#
1Q
1%
#36000
1R
1#
#38000
0R
0#
0Q
0%
#40000
1R
1#
#42000
0R
0#
1Q
1%
#44000
1R
1#
#44001
