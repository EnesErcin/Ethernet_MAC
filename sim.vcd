$date
	Sun Jun 18 13:32:59 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module gmii_test $end
$scope module transmit $end
$scope module encapsulation $end
$var wire 8 ! GMII_d [7:0] $end
$var wire 2 " bf_out_buffer_ready [1:0] $end
$var wire 1 # clk $end
$var wire 32 $ crc_check [31:0] $end
$var wire 8 % crc_data_in [7:0] $end
$var wire 1 & eth_tx_clk $end
$var wire 1 ' eth_tx_en $end
$var wire 8 ( ff_out_data_in [7:0] $end
$var wire 1 ) rst $end
$var wire 1 * data_out_en $end
$var reg 1 + GMII_tx_dv $end
$var reg 1 , GMII_tx_er $end
$var reg 1 - bf_in_pct_txed $end
$var reg 1 . bf_in_r_en $end
$var reg 16 / byte_count [15:0] $end
$var reg 1 0 crc_lsb $end
$var reg 32 1 crc_res [31:0] $end
$var reg 8 2 data_out [7:0] $end
$var reg 5 3 intr_pct_gap [4:0] $end
$var reg 16 4 len_payload [15:0] $end
$var reg 1 5 rst_crc $end
$var reg 4 6 state_reg [3:0] $end
$var reg 1 7 updatecrc $end
$scope function reflect_byte $end
$upscope $end
$scope module crc_mod $end
$var wire 1 & clk $end
$var wire 1 0 crc_lsb $end
$var wire 8 8 data [7:0] $end
$var wire 8 9 data_2 [7:0] $end
$var wire 32 : result [31:0] $end
$var wire 1 5 rst $end
$var wire 1 ; strt $end
$var wire 1 7 updatecrc $end
$var wire 8 < my_wire [7:0] $end
$var wire 8 = my_assing [7:0] $end
$var reg 12 > bit_n [11:0] $end
$var reg 12 ? byte_count [11:0] $end
$var reg 32 @ crc [31:0] $end
$var reg 32 A crc_acc [31:0] $end
$var reg 32 B crc_acc_n [31:0] $end
$var reg 32 C nresult [31:0] $end
$var reg 12 D payload_len [11:0] $end
$var reg 8 E register_one [7:0] $end
$var reg 8 F register_three [7:0] $end
$var reg 8 G register_two [7:0] $end
$scope function crc_bit_updt $end
$upscope $end
$scope function reflect_byte $end
$upscope $end
$scope function reflectcrc $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module gmii_test $end
$scope module transmit $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 H \data_regs[0] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module gmii_test $end
$scope module transmit $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 I \data_regs[1] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module gmii_test $end
$scope module transmit $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 J \data_regs[2] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module gmii_test $end
$scope module transmit $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 K \data_regs[3] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module gmii_test $end
$scope module transmit $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 L \data_regs[4] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module gmii_test $end
$scope module transmit $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 M \data_regs[5] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module gmii_test $end
$scope module transmit $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 N \data_regs[6] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module gmii_test $end
$scope module transmit $end
$scope module async_fifo $end
$scope module async_bram $end
$var reg 8 O \data_regs[7] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module gmii_test $end
$scope module transmit $end
$var wire 1 P buf_w_en $end
$var wire 8 Q data_in [7:0] $end
$var wire 1 ) eth_rst $end
$var wire 1 & eth_tx_clk $end
$var wire 1 ' eth_tx_en $end
$var wire 1 R fifo_nrst $end
$var wire 1 S pct_qued $end
$var wire 1 T r_clk $end
$var wire 1 # sys_clk $end
$var wire 1 U w_clk $end
$var wire 8 V buf_data_out [7:0] $end
$var wire 2 W bf_out_buffer_ready [1:0] $end
$var wire 1 . bf_in_r_en $end
$var wire 1 - bf_in_pct_txed $end
$scope module async_fifo $end
$var wire 1 R arst_n $end
$var wire 8 X data_in [7:0] $end
$var wire 1 Y full $end
$var wire 1 T rclk $end
$var wire 1 P w_en $end
$var wire 1 # wclk $end
$var wire 13 Z wrt_ptr [12:0] $end
$var wire 1 [ wr_srstn $end
$var wire 13 \ read_ptr [12:0] $end
$var wire 1 ] rd_srstn $end
$var wire 1 . r_en $end
$var wire 1 ^ full_gen $end
$var wire 1 _ empt $end
$var wire 8 ` data_out [7:0] $end
$scope module async_bram $end
$var wire 8 a data_in [7:0] $end
$var wire 1 Y full $end
$var wire 1 T rd_clk $end
$var wire 1 # wr_clk $end
$var wire 1 P wr_en $end
$var wire 13 b wrt_ptr [12:0] $end
$var wire 1 [ wr_srstn $end
$var wire 12 c w_ptr [11:0] $end
$var wire 13 d read_ptr [12:0] $end
$var wire 1 . rd_en $end
$var wire 12 e r_ptr [11:0] $end
$var wire 8 f data_out [7:0] $end
$scope begin $ivl_for_loop2 $end
$var integer 32 g i [31:0] $end
$upscope $end
$upscope $end
$scope module empt_gen $end
$var wire 13 h wr_pointer [12:0] $end
$var wire 13 i rd_pointer [12:0] $end
$var wire 1 ^ full $end
$var wire 1 _ empty $end
$upscope $end
$scope module rd_pointer $end
$var wire 1 _ empty $end
$var wire 1 T rclk $end
$var wire 1 j rd_ready $end
$var wire 1 ] rd_srstn $end
$var wire 1 . rd_en $end
$var reg 13 k read_ptr [12:0] $end
$upscope $end
$scope module rd_rst_scnch_m $end
$var wire 1 T clk $end
$var wire 1 R n_as_signal $end
$var reg 1 l hold $end
$var reg 1 ] n_s_signal $end
$upscope $end
$scope module wr_pointer $end
$var wire 1 Y full $end
$var wire 1 # wclk $end
$var wire 1 P wr_en $end
$var wire 1 m wr_ready $end
$var wire 1 [ wr_srstn $end
$var reg 13 n wrt_ptr [12:0] $end
$upscope $end
$scope module wr_rst_scnch_m $end
$var wire 1 # clk $end
$var wire 1 R n_as_signal $end
$var reg 1 o hold $end
$var reg 1 [ n_s_signal $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 p i [31:0] $end
$upscope $end
$upscope $end
$scope module buf_ready $end
$var wire 1 S bf_in_pct_qued $end
$var wire 1 # eth_tx_clk $end
$var wire 1 ) rst $end
$var wire 1 - bf_in_pct_txed $end
$var reg 2 q bf_out_buffer_ready [1:0] $end
$upscope $end
$scope module encapsulation $end
$scope function reflect_byte $end
$upscope $end
$scope module crc_mod $end
$scope function crc_bit_updt $end
$upscope $end
$scope function reflect_byte $end
$upscope $end
$scope function reflectcrc $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module gmii_test $end
$var wire 1 r adr_err $end
$var wire 2 s bf_out_buffer_ready [1:0] $end
$var wire 1 P buf_w_en $end
$var wire 1 t buffer_full $end
$var wire 8 u data_in [7:0] $end
$var wire 1 v eth_rst $end
$var wire 1 w eth_rx_clk $end
$var wire 1 & eth_tx_clk $end
$var wire 1 ' eth_tx_en $end
$var wire 8 x ff_out_data_in [7:0] $end
$var wire 1 y len_err $end
$var wire 1 z ncrc_err $end
$var wire 1 S pct_qued $end
$var wire 1 ) rst $end
$var wire 1 # sys_clk $end
$var reg 8 { GMII_tx_d [7:0] $end
$var reg 1 | GMII_tx_dv $end
$var reg 1 } GMII_tx_er $end
$var reg 1 ~ bf_in_r_en $end
$scope module decapsulation $end
$var wire 1 w clk $end
$var wire 32 !" crc_check [31:0] $end
$var wire 1 "" crc_lsb $end
$var wire 1 #" eth_tx_clk $end
$var wire 8 $" gmii_data_in [7:0] $end
$var wire 1 | gmii_dv $end
$var wire 1 %" gmii_en $end
$var wire 1 } gmii_er $end
$var wire 1 &" rst $end
$var wire 1 '" rst_crc $end
$var wire 1 (" updatecrc $end
$var wire 1 )" wrong_addr $end
$var wire 1 *" data_out_en $end
$var wire 1 +" cont_stages $end
$var reg 1 ," adr_err $end
$var reg 1 -" buffer_full $end
$var reg 14 ." byte_count [13:0] $end
$var reg 80 /" data_buf [79:0] $end
$var reg 32 0" data_crc [31:0] $end
$var reg 16 1" data_len [15:0] $end
$var reg 48 2" dest_addr [47:0] $end
$var reg 8 3" gmii_buf [7:0] $end
$var reg 1 4" len_err $end
$var reg 16 5" len_payload [15:0] $end
$var reg 1 6" ncrc_err $end
$var reg 1 7" rst_crc_reg $end
$var reg 48 8" source_addr [47:0] $end
$var reg 4 9" state_reg [3:0] $end
$var reg 1 :" updatecrc_reg $end
$scope module crc_mod $end
$var wire 1 #" clk $end
$var wire 1 "" crc_lsb $end
$var wire 8 ;" data [7:0] $end
$var wire 8 <" data_2 [7:0] $end
$var wire 32 =" result [31:0] $end
$var wire 1 '" rst $end
$var wire 1 >" strt $end
$var wire 1 (" updatecrc $end
$var wire 8 ?" my_wire [7:0] $end
$var wire 8 @" my_assing [7:0] $end
$var reg 12 A" bit_n [11:0] $end
$var reg 12 B" byte_count [11:0] $end
$var reg 32 C" crc [31:0] $end
$var reg 32 D" crc_acc [31:0] $end
$var reg 32 E" crc_acc_n [31:0] $end
$var reg 32 F" nresult [31:0] $end
$var reg 12 G" payload_len [11:0] $end
$var reg 8 H" register_one [7:0] $end
$var reg 8 I" register_three [7:0] $end
$var reg 8 J" register_two [7:0] $end
$scope function crc_bit_updt $end
$upscope $end
$scope function reflect_byte $end
$upscope $end
$scope function reflectcrc $end
$upscope $end
$upscope $end
$upscope $end
$scope module transmit $end
$scope module async_fifo $end
$scope module async_bram $end
$scope begin $ivl_for_loop2 $end
$upscope $end
$upscope $end
$scope module empt_gen $end
$upscope $end
$scope module rd_pointer $end
$upscope $end
$scope module rd_rst_scnch_m $end
$upscope $end
$scope module wr_pointer $end
$upscope $end
$scope module wr_rst_scnch_m $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$upscope $end
$upscope $end
$scope module buf_ready $end
$upscope $end
$scope module encapsulation $end
$scope function reflect_byte $end
$upscope $end
$scope module crc_mod $end
$scope function crc_bit_updt $end
$upscope $end
$scope function reflect_byte $end
$upscope $end
$scope function reflectcrc $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx J"
bx I"
bx H"
b10111101011 G"
b0 F"
b11111111111111111111111111111111 E"
b11111111111111111111111111111111 D"
b100110000010001110110110111 C"
b0 B"
b0 A"
bz0000000 @"
bz0000000 ?"
z>"
bz ="
b0z <"
b0z ;"
0:"
b0 9"
bx 8"
17"
x6"
b0 5"
x4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
b0 ."
x-"
x,"
x+"
1*"
0)"
0("
1'"
z&"
1%"
bx $"
z#"
z""
bz !"
x~
x}
x|
bx {
zz
zy
bz x
zw
zv
bz u
zt
bz s
zr
bx q
b1000 p
1o
bx n
0m
1l
bx k
0j
bx i
bx h
b0 g
bx f
bx e
bx d
bx c
bx b
bz a
bx `
x_
x^
0]
bx \
0[
bx Z
xY
bz X
bx W
bx V
zU
1T
zS
0R
bz Q
zP
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
b0 G
b0 F
b0 E
b10111101011 D
b0 C
b11111111111111111111111111111111 B
b11111111111111111111111111111111 A
b100110000010001110110110111 @
b0 ?
b0 >
b0 =
b0 <
z;
bz :
b0 9
b0 8
07
b0 6
15
b0 4
b0 3
b0 2
b1111 1
00
b0 /
x.
0-
x,
0+
0*
1)
bx (
z'
1&
b0 %
bz $
z#
bx "
b0 !
$end
#2000
0T
0&
#4000
b0 e
b0 \
b0 d
b0 i
b0 k
1T
1&
#6000
0T
0&
#8000
1T
1&
#10000
0T
0&
#12000
1T
1&
#14000
0T
0&
#16000
1T
1&
#18000
0T
0&
#20000
1T
1&
#22000
0T
0&
#24000
1T
1&
#26000
0T
0&
#28000
1T
1&
#30000
0T
0&
#32000
1T
1&
#34000
0T
0&
#36000
1T
1&
#38000
0T
0&
#40000
1T
1&
#42000
0T
0&
#44000
1T
1&
#46000
0T
0&
#48000
1T
1&
#50000
0T
0&
#52000
b11101000 <
b11101000 =
1R
17
b10111 9
b10111 %
b10111 8
0)
1T
1&
#54000
0T
0&
#56000
b1111010 <
b1111010 =
b1011110 9
b1011110 %
b1011110 8
0l
b11101000 F
b11101000 G
b11101000 E
1T
1&
#58000
0T
0&
#60000
b11000000 <
b11000000 =
b11 9
b11 %
b11 8
xj
1]
b1111010 F
b1111010 G
b1111010 E
1T
1&
#62000
0T
0&
#64000
b11000000 F
b11000000 G
b11000000 E
1T
1&
#66000
0T
0&
#68000
1T
1&
#70000
0T
0&
#72000
1T
1&
#74000
0T
0&
#76000
1T
1&
#78000
0T
0&
#80000
1T
1&
#82000
0T
0&
#84000
1T
1&
#86000
0T
0&
#88000
1T
1&
#90000
0T
0&
#92000
1T
1&
#94000
0T
0&
#96000
1T
1&
#98000
0T
0&
#100000
1T
1&
#102000
0T
0&
#104000
1T
1&
#106000
0T
0&
#108000
1T
1&
#110000
0T
0&
#112000
1T
1&
#114000
0T
0&
#116000
1T
1&
#118000
0T
0&
#120000
1T
1&
#122000
0T
0&
#124000
1T
1&
#126000
0T
0&
#128000
1T
1&
#130000
0T
0&
#132000
1T
1&
#134000
0T
0&
#136000
1T
1&
#138000
0T
0&
#140000
1T
1&
#142000
0T
0&
#144000
1T
1&
#146000
0T
0&
#148000
1T
1&
#150000
0T
0&
#152000
1T
1&
#154000
0T
0&
#156000
1T
1&
#158000
0T
0&
#160000
0j
1l
0]
0R
1T
1&
1)
#162000
0T
0&
#164000
1T
1&
#166000
0T
0&
#168000
1T
1&
#170000
0T
0&
#172000
1T
1&
#174000
0T
0&
#176000
1T
1&
#178000
0T
0&
#180000
1T
1&
#182000
0T
0&
#184000
1T
1&
#186000
0T
0&
#188000
1T
1&
#190000
0T
0&
#192000
1T
1&
#194000
0T
0&
#196000
1T
1&
#198000
0T
0&
#200000
1T
1&
#202000
0T
0&
#204000
1T
1&
#206000
0T
0&
#208000
1T
1&
#210001
